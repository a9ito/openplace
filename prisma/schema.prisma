generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                     Int                    @id @default(autoincrement())
  name                   String
  registrationIP         String?
  lastIP                 String?
  discord                String?
  discordUserId          String?                @unique
  nickname               String?
  country                String
  email                  String?                @unique
  passwordHash           String
  banned                 Boolean                @default(false)
  suspensionReason       String?
  timeoutUntil           DateTime               @default(now())
  needsPhoneVerification Boolean                @default(false)
  isCustomer             Boolean                @default(false)
  role                   String                 @default("user")
  pixelsPainted          Int                    @default(0)
  droplets               Int                    @default(0)
  maxCharges             Float                  @default(20)
  currentCharges         Float                  @default(20)
  chargesCooldownMs      Int                    @default(30000)
  chargesLastUpdatedAt   DateTime               @default(now())
  extraColorsBitmap      Int                    @default(0)
  flagsBitmap            Bytes?
  equippedFlag           Int                    @default(0)
  showLastPixel          Boolean                @default(true)
  maxFavoriteLocations   Int                    @default(15)
  picture                String?                @db.Text
  level                  Float                  @default(1)
  allianceId             Int?
  allianceRole           String                 @default("member")
  allianceJoinedAt       DateTime?
  alliance               Alliance?              @relation(fields: [allianceId], references: [id])
  paintedPixels          Pixel[]
  favoriteLocations      FavoriteLocation[]
  bannedIPs              BannedIP[]
  createdTickets         Ticket[]               @relation("TicketUser")
  reportedTickets        Ticket[]               @relation("TicketReportedUser")
  moderatedTickets       Ticket[]               @relation("TicketModeratorUser")
  createdNotes           UserNote[]             @relation("UserNoteUser")
  reportedNotes          UserNote[]             @relation("UserNoteReportedUser")
  regionStats            UserRegionStats[]
  regionStatsDaily       UserRegionStatsDaily[]
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt

  @@index([banned])
  @@index([registrationIP])
  @@index([lastIP])
  @@index([role, pixelsPainted])
  @@index([pixelsPainted])
}

model Alliance {
  id            Int              @id @default(autoincrement())
  name          String           @unique
  description   String?
  hqLatitude    Float?
  hqLongitude   Float?
  pixelsPainted Int              @default(0)
  members       User[]
  bannedUsers   BannedUser[]
  invites       AllianceInvite[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@index([pixelsPainted])
}

model BannedUser {
  id         Int      @id @default(autoincrement())
  userId     Int
  allianceId Int
  alliance   Alliance @relation(fields: [allianceId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([userId, allianceId])
}

model AllianceInvite {
  id         String   @id @default(uuid())
  allianceId Int
  alliance   Alliance @relation(fields: [allianceId], references: [id])
  createdAt  DateTime @default(now())
}

model FavoriteLocation {
  id        Int    @id @default(autoincrement())
  userId    Int
  user      User   @relation(fields: [userId], references: [id])
  name      String @default("")
  latitude  Float
  longitude Float
}

model BannedIP {
  id               Int      @id @default(autoincrement())
  cidr             String
  ipv4Min          Int?     @db.UnsignedInt
  ipv4Max          Int?     @db.UnsignedInt
  ipv6Min          Bytes?   @db.Binary(16)
  ipv6Max          Bytes?   @db.Binary(16)
  suspensionReason String
  userId           Int?
  user             User?    @relation(fields: [userId], references: [id])
  createdAt        DateTime @default(now())

  @@index([cidr])
  @@index([ipv4Min, ipv4Max])
  @@index([ipv6Min, ipv6Max])
}

model Tile {
  id        Int      @id @default(autoincrement())
  season    Int      @default(0) @db.UnsignedSmallInt
  x         Int      @db.UnsignedSmallInt
  y         Int      @db.UnsignedSmallInt
  imageData Bytes?
  pixels    Pixel[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([season, x, y])
}

model Pixel {
  id              Int      @id @default(autoincrement())
  season          Int      @default(0) @db.UnsignedSmallInt
  tileX           Int      @db.UnsignedSmallInt
  tileY           Int      @db.UnsignedSmallInt
  x               Int      @db.UnsignedSmallInt
  y               Int      @db.UnsignedSmallInt
  colorId         Int      @db.UnsignedSmallInt
  paintedBy       Int
  regionCityId    Int?
  regionCountryId Int?
  user            User     @relation(fields: [paintedBy], references: [id])
  tile            Tile     @relation(fields: [season, tileX, tileY], references: [season, x, y])
  paintedAt       DateTime @default(now())

  @@unique([season, tileX, tileY, x, y])
  @@index([season, tileX, tileY])
  @@index([regionCityId])
  @@index([regionCountryId])
  @@index([paintedAt])
  @@index([paintedBy, paintedAt])
  @@index([paintedAt, regionCityId])
  @@index([paintedAt, regionCountryId])
}

model Region {
  id        Int    @id @default(autoincrement())
  cityId    Int    @unique
  name      String
  number    Int
  countryId Int
  latitude  Float
  longitude Float

  @@unique([latitude, longitude])
  @@index([latitude])
  @@index([longitude])
}

model ProfilePicture {
  id     Int    @id @default(autoincrement())
  userId Int
  url    String @db.Text
}

model Session {
  id        String   @id @default(uuid())
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Ticket {
  id              String   @id @default(uuid())
  userId          Int
  user            User     @relation("TicketUser", fields: [userId], references: [id])
  reportedUserId  Int
  reportedUser    User     @relation("TicketReportedUser", fields: [reportedUserId], references: [id])
  moderatorUserId Int?
  moderatorUser   User?    @relation("TicketModeratorUser", fields: [moderatorUserId], references: [id])
  latitude        Float
  longitude       Float
  zoom            Float
  reason          String
  notes           String
  image           Bytes?
  resolution      String?
  severe          Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model UserNote {
  id             Int      @id @default(autoincrement())
  userId         Int
  user           User     @relation("UserNoteUser", fields: [userId], references: [id])
  reportedUserId Int
  reportedUser   User     @relation("UserNoteReportedUser", fields: [reportedUserId], references: [id])
  content        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model LeaderboardView {
  id            Int      @id @default(autoincrement())
  type          String
  mode          String
  entityId      Int?
  regionId      Int?
  rank          Int
  pixelsPainted Int
  lastUpdated   DateTime @default(now()) @updatedAt

  @@unique([type, mode, entityId, regionId])
  @@index([type, mode, rank])
  @@index([type, mode, pixelsPainted])
  @@index([type, mode, regionId])
}

model UserRegionStats {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  regionCityId    Int?
  regionCountryId Int?
  allianceId      Int?
  timePeriod      DateTime
  pixelsPainted   Int      @default(0)
  lastPaintedAt   DateTime @default(now()) @updatedAt

  @@unique([userId, regionCityId, regionCountryId, allianceId, timePeriod])
  @@index([userId])
  @@index([regionCityId])
  @@index([regionCountryId])
  @@index([allianceId])
  @@index([regionCityId, userId])
  @@index([regionCityId, allianceId])
}

model UserRegionStatsDaily {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  regionCityId    Int?
  regionCountryId Int?
  allianceId      Int?
  date            DateTime
  pixelsPainted   Int      @default(0)
  lastPaintedAt   DateTime @default(now()) @updatedAt

  @@unique([userId, regionCityId, regionCountryId, allianceId, date])
  @@index([regionCityId, date, pixelsPainted, userId])
  @@index([regionCityId, date, pixelsPainted, allianceId])
  @@index([regionCountryId, date, pixelsPainted])
}
